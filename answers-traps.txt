< Which registers contain arguments to functions? For example, which register
< holds 13 in main's call to printf?
> a0 to a a7. 13 is saved to a2 in the printf call.

< Where is the call to function f in the assembly code for main? Where is the
< call to g? (Hint: the compiler may inline functions.)
> There is no call to neither g nor f. The compiler has folded the constants and
> calculated the operation that would have been performed by the functions and
> directly loads it to a1 when calling printf.

< At what address is the function printf located?
> It is located at address 0x630.

< What value is in the register ra just after the jalr to printf in main?
> 0x38. jalr's address (pc when jalr is run) + 4

< Run the following code.
<   [...]
< What is the output?
< The output depends on that fact that the RISC-V is little-endian. If the
< RISC-V were instead big-endian what would you set i to in order to yield the
< same output? Would you need to change 57616 to a different value?
> HE110 World.
> i = 726c6400
> No, 57616 would not need to be changed since the compiler would read the
> english interpretation of the number and store it in memory correctly, as
> the byte representation does not change either in i, only the order of the
> bytes.

< In the following code, what is going to be printed after 'y='? (note: the
< answer is not a specific value.) Why does this happen?
<   [...]
> The contents of register a2 left there by previous use. Because the printf
> implementation used stores all possible arguments (up to a7) and then calls
> vprintf which accesses the va list  
